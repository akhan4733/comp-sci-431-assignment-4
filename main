import threading
import time
import random

# define a buffer with size with 5 
buffer = []
BUFFER_SIZE = 5

# lock for accessing the buffer
lock = threading.Lock()

# condition variable for waiting when the buffer is full
full = threading.Condition(lock)

# waiting when the buffer is empty 
empty = threading.Condition(lock)

# producer thread that adds items to the buffer
class ProducerThread(threading.Thread):
    def run(self):
        global buffer
        while True:
            # wait for time to pass by 
            time.sleep(random.random())
            # random item to add to the buffer
            item = random.randint(1, 100)
            with lock:
                # sees if the buffer is full
                while len(buffer) == BUFFER_SIZE:
                    full.wait()
                # adds the item to the buffer
                buffer.append(item)
                print(f"Producer added {item} to buffer")
                # alerts the buffer is not empty anymore
                empty.notify()

# removes items from the buffer
class ConsumerThread(threading.Thread):
    def run(self):
        global buffer
        while True:
            # wait for a random amount of time before consuming an item
            time.sleep(random.random())
            with lock:
                # wait if the buffer is empty
                while len(buffer) == 0:
                    empty.wait()
                # remove an item from the buffer
                item = buffer.pop(0)
                print(f"Consumer removed {item} from buffer")
                # notify the producer that the buffer is not full anymore
                full.notify()

# start the producer and consumer threads
producer_thread = ProducerThread()
consumer_thread = ConsumerThread()
producer_thread.start()
consumer_thread.start()
